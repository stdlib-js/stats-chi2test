{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/validate.js", "../lib/results.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': 0.05,\n\t\t'correct': true\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.correct] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'correct': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correct' ) ) {\n\t\topts.correct = options.correct;\n\t\tif ( !isBoolean( opts.correct ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'correct', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar ndarray2array = require( '@stdlib/ndarray-base-to-array' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {number} df - degrees of freedom\n* @param {ndarray} expected - expected frequencies\n* @returns {Results} results object\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df, expected ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df, expected );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\tthis._expected = expected;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var alpha = res.alpha;\n* // returns 0.1\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var df = res.df;\n* // returns 1\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Expected frequencies.\n*\n* @private\n* @name expected\n* @memberof Results.prototype\n* @type {ndarray}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var expected = res.expected;\n* // returns <ndarray>\n*/\nsetReadOnlyAccessor( Results.prototype, 'expected', function get() {\n\treturn this._expected;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var method = res.method;\n* // returns 'Chi-square independence test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square independence test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var pval = res.pValue;\n* // returns 0.0719\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var stat = res.statistic;\n* // returns 3.24\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square independence test\n*\n*     Null hypothesis: the two variables are independent\n*\n*        pValue: 0.0719\n*        statistic: 3.24\n*        degrees of freedom: 1\n*\n*     Test Decision: Reject null in favor of alternative at 10% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: the two variables are independent',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var o = res.toJSON();\n* // returns { 'rejected': true, 'alpha': 0.1, 'pValue': 0.0719, 'df': 1, ... }\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\tvar x = this._expected;\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'expected': ndarray2array( x.data, x.shape, x.strides, x.offset, x.order ),\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nmodule.exports = Results;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar flatten2dBy = require( '@stdlib/array-base-flatten2d-by' ).assign;\nvar Float64Array = require( '@stdlib/array-float64' );\nvar arrayShape = require( '@stdlib/array-shape' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar dsumpw = require( '@stdlib/blas-ext-base-dsumpw' );\nvar dscal = require( '@stdlib/blas-base-dscal' );\nvar dapx = require( '@stdlib/blas-ext-base-dapx' );\nvar dmin = require( '@stdlib/stats-base-dmin' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar format = require( '@stdlib/string-format' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar Results = require( './results.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// FUNCTIONS //\n\n/**\n* Callback invoked upon flattening an array-like object.\n*\n* @private\n* @param {NonNegativeInteger} value - nested array element\n* @param {NonNegativeIntegerArray} indices - element indices\n* @param {Collection<Collection>} arr - input array\n* @throws {TypeError} first argument must be a nonnegative integer\n* @returns {NonNegativeInteger} nested array element\n*/\nfunction flattenClbk( value, indices ) {\n\tif ( !isNonNegativeInteger( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Indices: (%s). Value: `%s`.', indices.join( ', ' ), String( value ) ) );\n\t}\n\treturn value;\n}\n\n/**\n* Copies ndarray data to a new data buffer.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray-like object\n* @param {NonNegativeIntegerArray} shape - array shape\n* @throws {TypeError} first argument must contain nonnegative integers\n* @returns {Float64Array} data buffer\n*/\nfunction copy2buffer( x, shape ) {\n\tvar out;\n\tvar buf;\n\tvar idx;\n\tvar ord;\n\tvar sx;\n\tvar ox;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\t// Cache ndarray meta data:\n\tbuf = x.data;\n\tord = x.order;\n\tsx = x.strides;\n\tox = x.offset;\n\n\t// Compute the number of array elements:\n\tN = numel( shape );\n\n\t// Allocate a data buffer:\n\tout = new Float64Array( N );\n\n\t// Iterate over the ndarray and copy elements to a new buffer...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tidx = vind2bind( shape, sx, ox, ord, i, MODE );\n\t\tv = buf[ idx ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Indices: (%s). Value: `%s`.', ind2sub( shape, sx, ox, ord, i, MODE ), String( v ) ) );\n\t\t}\n\t\tout[ i ] = v;\n\t}\n\treturn out;\n}\n\n/**\n* Computes a sum along an axis.\n*\n* @private\n* @param {Float64Array} x - strided array\n* @param {NonNegativeInteger} nrows - number of rows\n* @param {NonNegativeInteger} ncols - number of columns\n* @param {NonNegativeInteger} axis - axis (0: sum across the rows; 1: sum down the columns)\n* @returns {Float64Array} results\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // 2x3: [ [ 1.0, 2.0, 3.0 ], [ 4.0, 5.0, 6.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* var rsums = axisSum( x, 2, 3, 0 );\n* // returns <Float64Array>[ 6.0, 15.0 ]\n*\n* var csums = axisSum( x, 2, 3, 1 );\n* // returns <Float64Array>[ 5.0, 7.0, 9.0 ]\n*/\nfunction axisSum( x, nrows, ncols, axis ) {\n\tvar offset;\n\tvar out;\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i1;\n\n\t// Resolve loop variables...\n\tif ( axis === 0 ) {\n\t\t// Sum across rows...\n\t\tS0 = ncols;\n\t\tS1 = nrows;\n\t\tdx0 = 1;\n\t\tdx1 = ncols;\n\t} else { // axis === 1\n\t\t// Sum down columns...\n\t\tS0 = nrows;\n\t\tS1 = ncols;\n\t\tdx0 = ncols;\n\t\tdx1 = 1;\n\t}\n\tout = new Float64Array( S1 );\n\toffset = 0;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tout[ i1 ] = dsumpw.ndarray( S0, x, dx0, offset );\n\t\toffset += dx1;\n\t}\n\treturn out;\n}\n\n/**\n* Computes the outer product.\n*\n* @private\n* @param {Float64Array} x - first input array\n* @param {Float64Array} y - second input array\n* @returns {Float64Array} results\n*/\nfunction outer( x, y ) {\n\tvar out;\n\tvar io;\n\tvar M;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tM = x.length;\n\tN = y.length;\n\n\tout = new Float64Array( M*N );\n\tio = 0;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv = x[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tout[ io ] = v * y[ j ];\n\t\t\tio += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Computes the element-wise absolute difference.\n*\n* @private\n* @param {Float64Array} x - first input array\n* @param {Float64Array} y - second input array\n* @returns {Float64Array} results\n*/\nfunction absdiff( x, y ) {\n\tvar out;\n\tvar i;\n\n\tout = new Float64Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout[ i ] = abs( x[ i ] - y[ i ] );\n\t}\n\treturn out;\n}\n\n/**\n* Computes the test statistic.\n*\n* ## Notes\n*\n* -   Mutates the first input array.\n*\n* @private\n* @param {Float64Array} x - absolute differences\n* @param {Float64Array} m - expected frequencies\n* @returns {number} test statistic\n*/\nfunction testStatistic( x, m ) {\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tx[ i ] = ( x[i]*x[i] ) / m[ i ];\n\t}\n\treturn dsumpw( x.length, x, 1 );\n}\n\n\n// MAIN //\n\n/**\n* Performs a chi-square independence test.\n*\n* @param {(MatrixLike|Collection<Collection>)} x - two-way table of observed frequencies\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.correct=true] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @throws {TypeError} first argument must be an array of arrays or a two-dimensional ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n*\n* var out = chi2test( x );\n*\n* var o = out.toJSON();\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\nfunction chi2test( x, options ) {\n\tvar correction;\n\tvar diffs;\n\tvar csums;\n\tvar rsums;\n\tvar means;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar err;\n\tvar cnt;\n\tvar buf;\n\tvar dof;\n\tvar sh;\n\tvar M;\n\tvar N;\n\n\tif ( isndarrayLike( x ) ) {\n\t\tsh = x.shape;\n\t\tif ( sh.length !== 2 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of arrays or a two-dimensional ndarray-like object. Number of input array dimensions: %u.', sh.length ) );\n\t\t}\n\t\tbuf = copy2buffer( x, sh );\n\t} else if ( isCollection( x ) ) {\n\t\tsh = arrayShape( x );\n\t\tif ( sh.length !== 2 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of arrays or a two-dimensional ndarray-like object. Number of input array dimensions: %u.', sh.length ) );\n\t\t}\n\t\tbuf = new Float64Array( numel( sh ) );\n\t\tflatten2dBy( x, sh, false, buf, 1, 0, flattenClbk );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of arrays or a two-dimensional ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// NOTE: `buf` is now a single-segment contiguous `Float64Array` containing nonnegative integer values...\n\n\topts = defaults();\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Extract the array dimensions:\n\tM = sh[ 0 ]; // number of rows\n\tN = sh[ 1 ]; // number of columns\n\n\t// Compute the total number of observations:\n\tcnt = dsumpw( M*N, buf, 1 );\n\n\t// Compute marginal sums:\n\trsums = axisSum( buf, M, N, 0 ); // sum across the rows (length: M)\n\tcsums = axisSum( buf, M, N, 1 ); // sum down the columns (length: N)\n\n\t// Compute the outer product:\n\tmeans = outer( rsums, csums ); // MxN\n\n\t// Compute the expected frequencies:\n\tmeans = dscal( means.length, 1.0/cnt, means, 1 );\n\n\t// Compute the absolute differences between the observed and expected frequencies:\n\tdiffs = absdiff( buf, means );\n\n\t// Apply Yates' continuity correction...\n\tif ( M === 2 && N === 2 && opts.correct ) {\n\t\tcorrection = min( 0.5, dmin( diffs.length, diffs, 1 ) );\n\t\tdapx( diffs.length, -correction, diffs, 1 );\n\t}\n\n\t// Compute the test statistic:\n\tstat = testStatistic( diffs, means );\n\n\t// Compute the number of degrees of freedom:\n\tdof = ( M-1 ) * ( N-1 );\n\n\t// Compute the p-value:\n\tpval = 1 - chisqCDF( stat, dof );\n\n\t// Return test results:\n\tmeans = new ndarray( 'float64', means, [ M, N ], [ N, 1 ], 0, 'row-major', {\n\t\t'readonly': true\n\t});\n\treturn new Results( pval, opts.alpha, stat, dof, means );\n}\n\n\n// EXPORTS //\n\nmodule.exports = chi2test;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square independence test.\n*\n* @module @stdlib/stats-chi2test\n*\n* @example\n* var chi2test = require( '@stdlib/stats-chi2test' );\n*\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n*\n* var out = chi2test( x );\n*\n* var o = out.toJSON();\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\n\n// MODULES //\n\nvar chi2test = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = chi2test;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_validate", "__commonJSMin", "exports", "module", "isBoolean", "isNumber", "isObject", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_results", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "setReadOnly", "setReadOnlyAccessor", "ndarray2array", "format", "Results", "pValue", "alpha", "statistic", "df", "expected", "opts", "decision", "dgts", "out", "x", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isndarrayLike", "isCollection", "flatten2dBy", "Float64Array", "arrayShape", "ndarray", "numel", "vind2bind", "ind2sub", "dsumpw", "dscal", "dapx", "dmin", "abs", "min", "format", "chisqCDF", "defaults", "validate", "Results", "MODE", "flattenClbk", "value", "indices", "copy2buffer", "x", "shape", "out", "buf", "idx", "ord", "sx", "ox", "N", "v", "i", "axisSum", "nrows", "ncols", "axis", "offset", "dx0", "dx1", "S0", "S1", "i1", "outer", "y", "io", "M", "j", "absdiff", "testStatistic", "m", "chi2test", "options", "correction", "diffs", "csums", "rsums", "means", "opts", "pval", "stat", "err", "cnt", "dof", "sh", "chi2test"]
}
