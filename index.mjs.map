{"version":3,"file":"index.mjs","sources":["../lib/results.js","../lib/main.js","../lib/defaults.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport ndarray2array from '@stdlib/ndarray-base-to-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {number} df - degrees of freedom\n* @param {ndarray} expected - expected frequencies\n* @returns {Results} results object\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df, expected ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df, expected );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\tthis._expected = expected;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var alpha = res.alpha;\n* // returns 0.1\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var df = res.df;\n* // returns 1\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Expected frequencies.\n*\n* @private\n* @name expected\n* @memberof Results.prototype\n* @type {ndarray}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var expected = res.expected;\n* // returns <ndarray>\n*/\nsetReadOnlyAccessor( Results.prototype, 'expected', function get() {\n\treturn this._expected;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var method = res.method;\n* // returns 'Chi-square independence test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square independence test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var pval = res.pValue;\n* // returns 0.0719\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var stat = res.statistic;\n* // returns 3.24\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square independence test\n*\n*     Null hypothesis: the two variables are independent\n*\n*        pValue: 0.0719\n*        statistic: 3.24\n*        degrees of freedom: 1\n*\n*     Test Decision: Reject null in favor of alternative at 10% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '1H147', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '1H13P', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '1H12o', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: the two variables are independent',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var expected = array([\n*     [ 10.0, 15.0 ],\n*     [ 21.0, 12.0 ]\n* ]);\n* var res = new Results( 0.0719, 0.1, 3.24, 1, expected );\n*\n* var o = res.toJSON();\n* // returns { 'rejected': true, 'alpha': 0.1, 'pValue': 0.0719, 'df': 1, ... }\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\tvar x = this._expected;\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'expected': ndarray2array( x.data, x.shape, x.strides, x.offset, x.order ),\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nexport default Results;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { assign as flatten2dBy } from '@stdlib/array-base-flatten2d-by';\nimport Float64Array from '@stdlib/array-float64';\nimport arrayShape from '@stdlib/array-shape';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport dsumpw from '@stdlib/blas-ext-base-dsumpw';\nimport dscal from '@stdlib/blas-base-dscal';\nimport dapx from '@stdlib/blas-ext-base-dapx';\nimport dmin from '@stdlib/stats-base-dmin';\nimport abs from '@stdlib/math-base-special-abs';\nimport min from '@stdlib/math-base-special-min';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport chisqCDF from '@stdlib/stats-base-dists-chisquare-cdf';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\nimport Results from './results.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// FUNCTIONS //\n\n/**\n* Callback invoked upon flattening an array-like object.\n*\n* @private\n* @param {NonNegativeInteger} value - nested array element\n* @param {NonNegativeIntegerArray} indices - element indices\n* @param {Collection<Collection>} arr - input array\n* @throws {TypeError} first argument must be a nonnegative integer\n* @returns {NonNegativeInteger} nested array element\n*/\nfunction flattenClbk( value, indices ) {\n\tif ( !isNonNegativeInteger( value ) ) {\n\t\tthrow new TypeError( format( '1H1DS', indices.join( ', ' ), String( value ) ) );\n\t}\n\treturn value;\n}\n\n/**\n* Copies ndarray data to a new data buffer.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray-like object\n* @param {NonNegativeIntegerArray} shape - array shape\n* @throws {TypeError} first argument must contain nonnegative integers\n* @returns {Float64Array} data buffer\n*/\nfunction copy2buffer( x, shape ) {\n\tvar out;\n\tvar buf;\n\tvar idx;\n\tvar ord;\n\tvar sx;\n\tvar ox;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\t// Cache ndarray meta data:\n\tbuf = x.data;\n\tord = x.order;\n\tsx = x.strides;\n\tox = x.offset;\n\n\t// Compute the number of array elements:\n\tN = numel( shape );\n\n\t// Allocate a data buffer:\n\tout = new Float64Array( N );\n\n\t// Iterate over the ndarray and copy elements to a new buffer...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tidx = vind2bind( shape, sx, ox, ord, i, MODE );\n\t\tv = buf[ idx ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( '1H1DS', ind2sub( shape, sx, ox, ord, i, MODE ), String( v ) ) );\n\t\t}\n\t\tout[ i ] = v;\n\t}\n\treturn out;\n}\n\n/**\n* Computes a sum along an axis.\n*\n* @private\n* @param {Float64Array} x - strided array\n* @param {NonNegativeInteger} nrows - number of rows\n* @param {NonNegativeInteger} ncols - number of columns\n* @param {NonNegativeInteger} axis - axis (0: sum across the rows; 1: sum down the columns)\n* @returns {Float64Array} results\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // 2x3: [ [ 1.0, 2.0, 3.0 ], [ 4.0, 5.0, 6.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* var rsums = axisSum( x, 2, 3, 0 );\n* // returns <Float64Array>[ 6.0, 15.0 ]\n*\n* var csums = axisSum( x, 2, 3, 1 );\n* // returns <Float64Array>[ 5.0, 7.0, 9.0 ]\n*/\nfunction axisSum( x, nrows, ncols, axis ) {\n\tvar offset;\n\tvar out;\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i1;\n\n\t// Resolve loop variables...\n\tif ( axis === 0 ) {\n\t\t// Sum across rows...\n\t\tS0 = ncols;\n\t\tS1 = nrows;\n\t\tdx0 = 1;\n\t\tdx1 = ncols;\n\t} else { // axis === 1\n\t\t// Sum down columns...\n\t\tS0 = nrows;\n\t\tS1 = ncols;\n\t\tdx0 = ncols;\n\t\tdx1 = 1;\n\t}\n\tout = new Float64Array( S1 );\n\toffset = 0;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tout[ i1 ] = dsumpw.ndarray( S0, x, dx0, offset );\n\t\toffset += dx1;\n\t}\n\treturn out;\n}\n\n/**\n* Computes the outer product.\n*\n* @private\n* @param {Float64Array} x - first input array\n* @param {Float64Array} y - second input array\n* @returns {Float64Array} results\n*/\nfunction outer( x, y ) {\n\tvar out;\n\tvar io;\n\tvar M;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tM = x.length;\n\tN = y.length;\n\n\tout = new Float64Array( M*N );\n\tio = 0;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv = x[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tout[ io ] = v * y[ j ];\n\t\t\tio += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Computes the element-wise absolute difference.\n*\n* @private\n* @param {Float64Array} x - first input array\n* @param {Float64Array} y - second input array\n* @returns {Float64Array} results\n*/\nfunction absdiff( x, y ) {\n\tvar out;\n\tvar i;\n\n\tout = new Float64Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout[ i ] = abs( x[ i ] - y[ i ] );\n\t}\n\treturn out;\n}\n\n/**\n* Computes the test statistic.\n*\n* ## Notes\n*\n* -   Mutates the first input array.\n*\n* @private\n* @param {Float64Array} x - absolute differences\n* @param {Float64Array} m - expected frequencies\n* @returns {number} test statistic\n*/\nfunction testStatistic( x, m ) {\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tx[ i ] = ( x[i]*x[i] ) / m[ i ];\n\t}\n\treturn dsumpw( x.length, x, 1 );\n}\n\n\n// MAIN //\n\n/**\n* Performs a chi-square independence test.\n*\n* @param {(MatrixLike|Collection<Collection>)} x - two-way table of observed frequencies\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.correct=true] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @throws {TypeError} first argument must be an array of arrays or a two-dimensional ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n*\n* var out = chi2test( x );\n*\n* var o = out.toJSON();\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\nfunction chi2test( x, options ) {\n\tvar correction;\n\tvar diffs;\n\tvar csums;\n\tvar rsums;\n\tvar means;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar err;\n\tvar cnt;\n\tvar buf;\n\tvar dof;\n\tvar sh;\n\tvar M;\n\tvar N;\n\n\tif ( isndarrayLike( x ) ) {\n\t\tsh = x.shape;\n\t\tif ( sh.length !== 2 ) {\n\t\t\tthrow new TypeError( format( '1H1DT', sh.length ) );\n\t\t}\n\t\tbuf = copy2buffer( x, sh );\n\t} else if ( isCollection( x ) ) {\n\t\tsh = arrayShape( x );\n\t\tif ( sh.length !== 2 ) {\n\t\t\tthrow new TypeError( format( '1H1DT', sh.length ) );\n\t\t}\n\t\tbuf = new Float64Array( numel( sh ) );\n\t\tflatten2dBy( x, sh, false, buf, 1, 0, flattenClbk );\n\t} else {\n\t\tthrow new TypeError( format( '1H1DU', x ) );\n\t}\n\t// NOTE: `buf` is now a single-segment contiguous `Float64Array` containing nonnegative integer values...\n\n\topts = defaults();\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Extract the array dimensions:\n\tM = sh[ 0 ]; // number of rows\n\tN = sh[ 1 ]; // number of columns\n\n\t// Compute the total number of observations:\n\tcnt = dsumpw( M*N, buf, 1 );\n\n\t// Compute marginal sums:\n\trsums = axisSum( buf, M, N, 0 ); // sum across the rows (length: M)\n\tcsums = axisSum( buf, M, N, 1 ); // sum down the columns (length: N)\n\n\t// Compute the outer product:\n\tmeans = outer( rsums, csums ); // MxN\n\n\t// Compute the expected frequencies:\n\tmeans = dscal( means.length, 1.0/cnt, means, 1 );\n\n\t// Compute the absolute differences between the observed and expected frequencies:\n\tdiffs = absdiff( buf, means );\n\n\t// Apply Yates' continuity correction...\n\tif ( M === 2 && N === 2 && opts.correct ) {\n\t\tcorrection = min( 0.5, dmin( diffs.length, diffs, 1 ) );\n\t\tdapx( diffs.length, -correction, diffs, 1 );\n\t}\n\n\t// Compute the test statistic:\n\tstat = testStatistic( diffs, means );\n\n\t// Compute the number of degrees of freedom:\n\tdof = ( M-1 ) * ( N-1 );\n\n\t// Compute the p-value:\n\tpval = 1 - chisqCDF( stat, dof );\n\n\t// Return test results:\n\tmeans = new ndarray( 'float64', means, [ M, N ], [ N, 1 ], 0, 'row-major', {\n\t\t'readonly': true\n\t});\n\treturn new Results( pval, opts.alpha, stat, dof, means );\n}\n\n\n// EXPORTS //\n\nexport default chi2test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': 0.05,\n\t\t'correct': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.correct] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'correct': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1H12V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '1H18P', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( '1H19Q', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correct' ) ) {\n\t\topts.correct = options.correct;\n\t\tif ( !isBoolean( opts.correct ) ) {\n\t\t\treturn new TypeError( format( '1H12o', 'correct', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["Results","pValue","alpha","statistic","df","expected","this","_pValue","_alpha","_statistic","_df","_expected","setReadOnlyAccessor","prototype","setReadOnly","opts","decision","dgts","out","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","method","roundn","push","join","x","rejected","ndarray2array","data","shape","strides","offset","order","MODE","flattenClbk","value","indices","isNonNegativeInteger","String","axisSum","nrows","ncols","axis","dx0","dx1","S0","S1","i1","Float64Array","dsumpw","ndarray","chi2test","options","correction","diffs","means","pval","stat","err","cnt","buf","dof","sh","M","N","isndarrayLike","ord","sx","ox","v","i","numel","vind2bind","ind2sub","copy2buffer","isCollection","arrayShape","flatten2dBy","correct","isNumber","isnan","RangeError","simulate","validate","y","io","j","outer","abs","absdiff","dscal","min","dmin","dapx","m","testStatistic","chisqCDF","readonly"],"mappings":"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"}