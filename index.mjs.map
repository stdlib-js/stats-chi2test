{"version":3,"file":"index.mjs","sources":["../lib/print.js","../lib/sum.js","../lib/outer.js","../lib/absdiff.js","../lib/validate.js","../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Options} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar decision;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0dP4K', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0dP3b', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0dP30', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Null hypothesis: the two variables are independent';\n\t\tstr += '\\n\\n';\n\t\tstr += '    pValue: ' + roundn( results.pValue, -dgts ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( results.statistic, -dgts ) + '\\n';\n\t\tstr += '    degrees of freedom: ' + results.df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default prettyPrint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Computes the sum along a matrix dimension.\n*\n* @param {Matrix} mat - input matrix\n* @param {number} [dim=2] - matrix dimension along which to compute the sum. If `dim=1`, compute along matrix rows. If `dim=2`, compute along matrix columns.\n* @returns {(Int32Array|number)} sums or 0\n*/\nfunction sum( mat, dim ) {\n\tvar out;\n\tvar s0;\n\tvar s1;\n\tvar s;\n\tvar M;\n\tvar N;\n\tvar o;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( dim === 1 ) {\n\t\t// Compute along the rows...\n\t\tM = mat.shape[ 1 ];\n\t\tN = mat.shape[ 0 ];\n\t\ts0 = mat.strides[ 1 ];\n\t\ts1 = mat.strides[ 0 ];\n\t} else {\n\t\t// Compute along the columns...\n\t\tM = mat.shape[ 0 ];\n\t\tN = mat.shape[ 1 ];\n\t\ts0 = mat.strides[ 0 ];\n\t\ts1 = mat.strides[ 1 ];\n\t}\n\tif ( M === 0 || N === 0 ) {\n\t\treturn 0;\n\t}\n\tout = new Float64Array( M );\n\to = mat.offset;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tk = o + ( i*s0 );\n\t\ts = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ts += mat.data[ k + ( j*s1 ) ];\n\t\t}\n\t\tout[ i ] = s;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport array from '@stdlib/ndarray-array';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Computes the outer product.\n*\n* @param {Float64Array} x - first factor of outer product\n* @param {Float64Array} y - second factor of outer product\n* @returns {Matrix} output matrix\n*/\nfunction outer( x, y ) {\n\tvar xlen = x.length;\n\tvar ylen = y.length;\n\tvar out = array( new Float64Array( xlen * ylen ), {\n\t\t'shape': [ xlen, ylen ]\n\t});\n\tvar i;\n\tvar j;\n\tfor ( i = 0; i < xlen; i++ ) {\n\t\tfor ( j = 0; j < ylen; j++ ) {\n\t\t\tout.set( i, j, x[ i ] * y[ j ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default outer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\nimport array from '@stdlib/ndarray-array';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise absolute difference of two matrices and stores the results in a typed array.\n*\n* @param {Matrix} x - first input matrix\n* @param {Matrix} y - second input matrix\n* @returns {Matrix} matrix containing the absolute differences\n*/\nfunction absdiff( x, y ) {\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar M;\n\tvar N;\n\tvar v;\n\n\tM = x.shape[ 0 ];\n\tN = x.shape[ 1 ];\n\tout = array( new Float64Array( M * N ), {\n\t\t'shape': [ M, N ]\n\t});\n\tfor ( i = 0; i < M; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = abs( x.get( i, j ) - y.get( i, j ) );\n\t\t\tout.set( i, j, v );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default absdiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.correct] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'correct': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0dP2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0dP8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correct' ) ) {\n\t\topts.correct = options.correct;\n\t\tif ( !isBoolean( opts.correct ) ) {\n\t\t\treturn new TypeError( format( '0dP30', 'correct', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport isNonNegativeIntegerArray from '@stdlib/assert-is-nonnegative-integer-array';\nimport isMatrixLike from '@stdlib/assert-is-matrix-like';\nimport isArrayArray from '@stdlib/assert-is-array-array';\nimport array from '@stdlib/ndarray-array';\nimport incrmin from '@stdlib/stats-incr-min';\nimport gsum from '@stdlib/blas-ext-base-gsum';\nimport min from '@stdlib/math-base-special-min';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport chisqCDF from '@stdlib/stats-base-dists-chisquare-cdf';\nimport prettyPrint from './print.js';\nimport defaults from './defaults.js';\nimport sumByDimension from './sum.js';\nimport outer from './outer.js';\nimport absdiff from './absdiff.js';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Performs a chi-square independence test.\n*\n* @param {(ndarray|ArrayArray)} x - two-way table of cell counts\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.correct=true] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @throws {TypeError} first argument must be an array of arrays or ndarray-like object with dimension two\n* @returns {Object} test results\n*\n* @example\n*\n* @example\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n* var out = chi2test( x );\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\nfunction chi2test( x, options ) {\n\tvar absDiff;\n\tvar colSums;\n\tvar rowSums;\n\tvar minAbs;\n\tvar yates;\n\tvar means;\n\tvar param;\n\tvar nrow;\n\tvar ncol;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar err;\n\tvar out;\n\tvar N;\n\tvar e;\n\tvar i;\n\tvar j;\n\n\tif ( isArrayArray( x ) ) {\n\t\tx = array( x );\n\t}\n\tif ( !isMatrixLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of arrays or a two-dimensional ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( x.data ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Value: `%s`.', x ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tN = gsum( x.length, x.data, 1 );\n\tnrow = x.shape[ 0 ];\n\tncol = x.shape[ 1 ];\n\n\tcolSums = sumByDimension( x, 1 );\n\trowSums = sumByDimension( x, 2 );\n\tmeans = outer( rowSums, colSums );\n\tfor ( i = 0; i < means.length; i++ ) {\n\t\tmeans.data[ i ] /= N;\n\t}\n\tabsDiff = absdiff( x, means );\n\n\tif ( opts.correct && nrow === 2 && ncol === 2 ) {\n\t\t// Apply Yates' continuity correction:\n\t\tminAbs = incrmin();\n\t\tfor ( i = 0; i < absDiff._buffer.length; i++ ) {\n\t\t\tminAbs( absDiff._buffer[ i ] );\n\t\t}\n\t\tyates = min( 0.5, minAbs() );\n\t\tfor ( i = 0; i < absDiff._buffer.length; i++ ) {\n\t\t\tabsDiff._buffer[ i ] -= yates;\n\t\t}\n\t}\n\tfor ( i = 0; i < nrow; i++) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\te = absDiff.get( i, j ) * absDiff.get( i, j ) / means.get( i, j );\n\t\t\tabsDiff.set( i, j, e );\n\t\t}\n\t}\n\tstat = gsum( absDiff.length, absDiff._buffer, 1 );\n\tparam = ( nrow - 1 ) * ( ncol - 1 );\n\tpval = 1 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'expected', means );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Chi-square independence test' );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default chi2test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': 0.05,\n\t\t'correct': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["prettyPrint","results","opts","decision","dgts","str","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","method","roundn","pValue","statistic","df","rejected","alpha","sum","mat","dim","out","s0","s1","s","M","N","o","i","j","k","shape","strides","Float64Array","offset","data","outer","x","y","xlen","ylen","array","set","absdiff","v","abs","get","validate","options","isNumber","isnan","RangeError","correct","simulate","chi2test","absDiff","colSums","minAbs","yates","means","param","nrow","ncol","pval","stat","err","e","isArrayArray","isMatrixLike","isNonNegativeIntegerArray","gsum","sumByDimension","incrmin","_buffer","min","chisqCDF","setReadOnly"],"mappings":"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"}